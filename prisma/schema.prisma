// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(125)
  lastName String @db.VarChar(125)
  username String @db.VarChar(100)
  email String @unique @db.VarChar(100)
  hashedPassword String @db.VarChar(100)
  profile Profile?
  role Role @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verified Boolean @default(false)
  refreshToken RefreshToken? @relation("RefreshToken")
  tokens Token[] @relation("Token")
  authoredChats Chat[] @relation("AuthoredChat")
  chats Chat[] @relation("ReceivedChat")
  blocked User[] @relation("BlockedUsers")
  blocking User[] @relation("BlockedUsers")
  following  User[] @relation("UserFollows")
  followedBy User[] @relation("UserFollows")
  followedPost SavedPost[]
  notifications Notification[]
  posts Post[]
  comments Comment[]
  commentLikes CommentLike[]
  likes PostLike[] 

  @@map("users")
}

enum Gender {
  male
  female
  null
}

model Profile {
  id Int @id @default(autoincrement()) 
  profileDescription String? @db.Text
  birthDate DateTime?
  gender Gender? @default(null)
  avatarImage Image? @relation(name: "ProfileImage")
  coverImage CoverImage?
  userId String @unique @db.VarChar(100)

  user User @relation(fields: [userId], references: [email], onDelete: Cascade)

  @@map("profiles")
}

model Post {
  id Int @id @default(autoincrement())
  authorId Int
  images Image[] @relation(name: "PostImages")
  title String? @db.VarChar(255)
  content String @db.Text
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes PostLike[]
  type PostType @default(public)
  follower SavedPost[]
  author User @relation(fields: [authorId] , references: [id], onDelete: Cascade)

  @@map("posts")
}

model SavedPost {
post Post @relation(fields: [postId],references: [id])
postId Int
user User @relation(fields: [userId], references: [id])
userId Int
assignedAt DateTime @default(now())
@@id([postId, userId])
}

enum PostType {
  public
  private
  friends
}

model Comment {
  id Int @id @default(autoincrement())
  postId Int
  userId Int
  image Image? @relation(name: "CommentImage")
  comment String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  parentId Int?
  likes CommentLike[]
  parentComment Comment? @relation("ReplyComment",fields: [parentId],  references: [id], onDelete: Cascade)
  childrenComment Comment[] @relation("ReplyComment")

  post Post? @relation(fields: [postId],  references: [id], onDelete: Cascade)
  user User @relation(fields: [userId],  references: [id],  onDelete: Cascade)

  @@map("comments")
}

model CommentLike {
  userId Int
  commentId Int 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@id([userId,commentId])
  @@map("comment_likes")
}

model PostLike {
  userId Int
  postId Int 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@id([userId,postId])
  @@map("post_likes")
}

enum Role {
admin
user
}

model Image {
  id Int @id @default(autoincrement())
  src String
  postId Int?
  profileId Int? @unique
  commentId Int? @unique
  chatId Int? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat Chat? @relation("ChatImage", fields: [chatId],references: [id], onDelete: Cascade)
  profile Profile? @relation("ProfileImage",fields: [profileId],  references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentImage",fields: [commentId],  references: [id], onDelete: Cascade)
  post Post? @relation("PostImages",fields: [postId],  references: [id],onDelete: Cascade)

  @@map("images")
}

model CoverImage {
  id Int @id @default(autoincrement())
  src String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId Int? @unique

  profile Profile? @relation(fields: [profileId],  references: [id], onDelete: Cascade)
}

model RefreshToken {
  id Int @id @default(autoincrement())
  refreshToken String @unique @db.VarChar(255) @map("refresh_token")
  userId Int @unique
  user User @relation("RefreshToken",fields: [userId],  references: [id],onDelete: Cascade)

  @@map("refresh_token")
}

model Token {
  id Int @id @default(autoincrement())
  token String @unique @db.VarChar(255)
  userEmail String @db.VarChar(100)
  createdAt DateTime @default(now())
  expires_in DateTime 
  type TokenType
  user User @relation("Token",fields: [userEmail],  references: [email],onDelete: Cascade)

  @@map("tokens")
}

model Chat {
  id Int @id @default(autoincrement())
  message String? @db.Text
  chatImage Image? @relation("ChatImage")
  authorId Int
  author User @relation("AuthoredChat",fields: [authorId], references: [id], onDelete: Cascade)
  recipientId Int
  recipient User @relation("ReceivedChat",fields: [recipientId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}

enum TokenType {
reset_token
verify_token
}

model Notification {
  id Int @id @default(autoincrement())
  userId Int
  title String @db.VarChar(255)
  content String @db.Text
  type NotificationType
  url String? @db.VarChar(255)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("notifications")
}

enum NotificationType {
  follow
  post
  comment
  like
}